Getting started
 The KReport module works in a fashion similar to the DB query builder. Methods can be chained together to quickly build a graph, and there are a few different ways to achieve your end result.
 
The module works with the concept of singletons between graphs, charts, and elements.
You can instantiate each of these object types (except elements) and add them to the graph later, or you can call the instance() method in each class (except elements) and let the class handle the instantiation for you.
 
The broad overview of how these three main classes fit together is as follows:
A graph is a collection of charts and elements intended for display on a website or exportation as csv or a table.
A chart is a collection of data points. Each chart has a type and different properties.
An element is a setting of the graph, such as the x/y axes. Elements are managed and coordinated through the use of methods in the KReport class.
 
Load the Library
Bootstrap
 
Add the following to your bootstrap modules array:
'kreport' => MODPATH.'KReport'
 

Creating a new Graph
 

Each KReport graph you want to display must be created in either of these styles.

These both create a graph with the name "default."

 

$chart = KReport::instance();
 
$chart = new KReport('default');
From here, you can start adding charts to the graph. View the Charts section for information on how to do this.

Displaying the Graph
Display the OFC2 flash object with our prepared data:

$chart->execute()->as_chart();
 Configuring the Graph
Using the chart we instantiated above, we can now chain calls to configure the graph to our liking.

See Graph Options for a break down of the following options, as well as other options you can configure.

$chart
->width('100%')
->height('200')
->exportable()
->x_labels(array('one', 'two', 'three', 'four', 'five'))
->bg_colour('#FFFFFF')
->title('Votes per Hour');
Graph Options
Set the width of the graph. This can be any valid CSS unit.

KReport::instance()->width( '100%' );
Set the height of the graph. This can be any valid CSS unit.

KReport::instance()->height( '200' );
Set the X-axis labels of the graph. This must be a numerically indexed array.

KReport::instance()->x_labels( array('one', 'two', 'three', 'four', 'five) );
Set the Y-axis labels of the graph. This must be a numerically indexed array.

KReport::instance->y_labels( array('one', 'two', 'three', 'four', 'five) );
Set the right Y-axis labels of the graph. This must be a numerically indexed array.

KReport::instance()->y_labels_right( array('five', 'four', 'three', 'two', 'one') );
Set the X-axis steps. This is how many units to skip past, and when to display a value on the X axis. That is, if the X-axis steps are set to 2, a value will be displayed every 2 units instead of every 1.

KReport::instance()->x_steps( 2 );
Set the Y-axis steps. This is how many units to skip past, and when to display a value on the Y axis. That is, if the Y-axis steps are set to 2, a value will be displayed every 2 units instead of every 1.

 KReport::instance()->y_steps ( 5 );
Set the right Y-axis steps. This is how many units to skip past, and when to display a value on the right Y axis. That is, if the right Y-axis steps are set to 2, a value will be displayed every 2 units instead of every 1.

 KReport::instance()->y_steps_right( 10 );
Set the colour of the X-axis

 KReport::instance()->x_colour( '#FF0000' );
Set the colour of the Y-axis

 KReport::instance()->y_colour( '#00FF00' );
Set the colour of the right Y-axis

 KReport::instance()->y_colour_right( '#0000FF' );
Set the stroke width of the X-axis

 KReport::instance()->x_stroke( 1 );
Set the stroke width of the Y-axis

 KReport::instance()->y_stroke( 1 );
Set the stroke width of the right Y-axis

 KReport::instance()->y_stroke_right( 1 );
Set the tick length of the X-axis

 KReport::instance()->x_tick_length( 1 );
Set the tick length of the Y-axis

 KReport::instance()->y_tick_length( 1 );
Set the tick length of the right Y-axis

 KReport::instance()->y_tick_length_right( 1 );

Set the background colour of the graph.

KReport::instance()->bg_colour( '#FFFFFF' );
Set the title of the graph.

KReport::instance()->title( 'Votes per Hour' );
Set the X-axis alias

KReport::instance()->x_alias( 'Hour' );
Set the Y-axis alias

KReport::instance()->y_alias( 'Votes' );
Allow the graph to be exported to CSV and display an 'Export to CSV' link at the bottom of the graph.

KReport::instance()->exportable();
Force the X-axis range. Arguments are $min and $max.

KReport::instance()->x_range( 0, 23 );
Force the Y-axis range. Arguments are $min and $max.

KReport::instance()->y_range( 0, 100 );
 

Charts
All chart types are extensions of the KReport_Chart class, which has the following configuration methods:

Set the key of the chart with a font size of 10.

$chart_instance->key( 'Number of beers finished', 10 )
 

Set the colour of the chart.

$chart_instance->colour( '#F0000F' );
Set the halo size of the chart.

$chart_instance->halo_size( 2 );
Set the tooltip of the chart.

$chart_instance->tooltip( 'Value: #y#' );
Get the name of the KReport_Chart instance.

$chart_instance->get();
Get the lowest X-value of the chart.

$chart_instance->get_x_min();
Get the highest X-value of the chart

$chart_instance->get_x_max();
Get the lowest Y-value of the chart

$chart_instance->get_y_min();
Get the highest X-value of the chart

$chart_instance->get_y_max();
Set the chart values from an array of data. The exact format of the array differs per chart type, but this method is available to all.

$chart_instance->data( array( '...' ) );
Get the values of the chart

$chart_instance->get_values();
 

Line Chart 
Basic Usage
Use data() method:

$line_instance = $chart->series('Votes Per Hour', KReport_Chart::LINE)
                        ->data( array(
                                0 => 10,
                                1 => 15,
                                2 => 5,
                                3 => 50  
                        ) );
Use point() method:

$line_instance = $chart->series('Votes Per Hour', KReport_Chart::LINE)
                       ->point(0, 10)
                       ->point(1, 15)
                       ->point(2, 5)
                       ->point(3, 50);
Available Configuration Options
Set the width of the line

$line_instance->width( 2 );
Set the dot size of the line

$line_instance->dot_size( 2 );
Bar Chart
Basic Usage
Use data() method:

$bar_instance = $chart->series('Votes Per Hour', KReport_Chart::BAR)
                        ->data( array(
                                0 => 10,
                                1 => 15,
                                2 => 5,
                                3 => 50
                        ) );
Use point() method:

$bar_instance = $chart->series('Votes Per Hour', KReport_Chart::BAR)
                      ->point(0, 10)
                      ->point(1, 15)
                      ->point(2, 5)
                      ->point(3, 50);
Area Chart
Basic Usage
Use data() method:

$area_instance = $chart->series('Sin', KReport_Chart::AREA)
                  ->data( array(
                          0,
                          1.36297657271,
                          1.89918984578,
                          1.28338004305,
                          -0.110910872512,
                          -1.43792474109,
                          -1.89271275679,
                          -1.19940661196
                  ) );
Use point() method:

$area_instance = $chart->series('Sin', KReport_Chart::AREA)
                       ->point(0, 0)
                       ->point(1, 1.36297657271)
                       ->point(2, 1.89918984578)
                       ->point(3, 1.28338004305)
                       ->point(4, -0.110910872512)
                       ->point(5, -1.43792474109)
                       ->point(6, -1.89271275679)
                       ->point(7, -1.19940661196);
Available Configuration Options
Set the width of the line

$area_instance->width( 1 );
Set the dot colour of the line

$area_instance->dot_colour( '#F0000F' );
Set the dot colour and size of the line

$area_instance->dot_style( '#FF00FF', 2 );
Set the "fill colour" of the shaded area of the graph

 

$area_instance->fill_colour( '#F00FF0' );
Set the alpha of the shaded area

$area_instance->fill_alpha( 0.5 );
Pie Chart
Basic Usage
Use the data() method:

$pie_instance = $chart->series('Slices of Pie', KReport_Chart::PIE)
                      ->data(array(
                              array(
                                      'value' => 50,
                                      'text'  => 'People who like pumpkin pie (#val#)' 
                              ),
                              array(
                                       'value' => 75,
                                       'text' => 'People who like apple pie (#val#)'
                              ),
                              array(
                                       'value' => 1,
                                       'text' => 'People who do not like pie (#val#)'  
                              ),
                              array(
                                       'value' => 2
                              )  
                      ));
Use the slice() method:

$pie_instance = $chart->series('Slices of Pie', KReport_Chart::PIE)
        ->slice(50, 'People who like pumpkin pie (#val#)')
        ->slice(75, 'People who like apple pie (#val#)')
        ->slice(1,  'People who do not like pie (#val#)')  
        ->slice(2);
Available Configuration Options
Set the border of each slice

$pie_instance->border( 2 );
Set the alpha of the pie chart

$pie_instance->alpha( 0.5 );
Set the initial angle of the pie chart

$pie_instance->angle( 360 );
Set the colours of each slice. Sets the colour of the slice that shares an index in the charts values.

$pie_instance->colours( array(
        0 => '#FF0000',
        1 => '#00FF00',
        2 => '#0000FF',
        3 => '#F0000F'   
) );
Horizontal Bar Chart
Basic Usage
Use the data() method:

$hbar_instance = $chart->series('Days Events', KReport_Chart::HBAR)
                       ->data( array(
                               array(
                                       'left'  => 0,
                                       'right' => 1
                                       KReport_Chart::TOOLTIP => 'Wake up between 12am and 1am'
                               ),
                               array(
                                       'left'  => 1,
                                       'right' => 9,
                                       KReport_Chart::TOOLTIP => 'Work for 8 hours' 
                               ),
                               array(
                                       'left'  => 9
                                       'right' => 16,
                                       KReport_Chart::TOOLTIP => 'Chill out'  
                               ),
                               array(
                                       'left'  => 16,
                                       'right' => 24,
                                       KReport_Chart::TOOLTIP => 'Sleep'
                               ),
                               array(
                                       'left'  => 20,
                                       'right' => 24
                               )
                       ) );
Use the bar() method:

$hbar_instance = $chart->series('Days Events', KReport_Chart::HBAR)
                       ->bar(0, 1,   'Wake up between 12am and 1am')
                       ->bar(1, 9,   'Work for 8 hours')
                       ->bar(9, 16,  'Chill out')
                       ->bar(16, 24, 'Sleep')
                       ->bar(20, 24);
Stacked Bar Chart
Basic Usage
Use the data() method:

$sbar_instance = $chart->series('Stacked Data', KReport_Chart::STACKBAR)
                        ->data( array( 
                                array(0, 10),
                                array(5, 5),
                                array(2, 9),
                                array(9, 4)   
                        ) );
Use the bar() method:

$sbar_instance = $chart->series('Stacked Data', KReport_Chart::STACKBAR)
                       ->bar(0, 10)
                       ->bar(5, 5)
                       ->bar(2, 9)
                       ->bar(9, 4);
Available Configuration Options
Set the colour, text, and font size of a "stack." Stack() should be called for every stack that you want to configure in the order that the stack data has been defined for the stacked bar chart.

$sbar_instance->stack( '#FF0000', 'Bar 1', 10 );
Set an onclick() event handler for the bar

$sbar_instance->click( 'sbar_clicked' );
Tag Chart
Basic Usage
Use the data() method:

$tag_instance = $chart->series('Tags', KReport_Chart::TAG)
                      ->data( array(
                              0  => 10,
                              1  => 20,
                              13 => 2,
                              9  => 18   
                      ) );
Use the point() method:

$tag_instance = $chart->series('Tags', KReport_Chart::TAG)
                      ->point(0, 10)
                      ->point(1, 20)
                      ->point(13, 2)
                      ->point(9, 18);
Available Configuration Options
Set the text for each tag

$tag_instance->text( '#y#' );
Set the font for each tag, with a font size of 10

$tag_instance->font( 'Verdana', 10 );
Set the vertical and horizontal padding for each tag

$tag_instance->padding( 10, 10 );
Set the X alignment for each tag. Can be one of 'left,' 'center,' or 'right.'

$tag_instance->x_align( 'center' );
Set the Y alignment for each tag. Can be one of 'above,' 'center,' or 'below.'

$tag_instance->y_align( 'center' );
Set an onclick() handler for each tag

$tag_instance->on_click( 'tag_clicked' );
Set the font style for each tag. Arguments are $bold, $underline, $border, and $alpha.

$tag_instance->style( false, false, 0, 1 );
Set the rotation angle of each tag

$tag_instance->rotate( 0 );
Putting it all together
With what we know above, we can create any number of graphs in any configuration we want.

Let's see an example with multiple line charts with a bar chart that has a value for every line chart:

$chart = KReport::instance()
         ->title('Line and Bar')
         ->width('100%')
         ->height('200')
         ->exportable();
 
$chart->series('Line', KReport_Chart::LINE)
      ->width(2)
      ->key('Arbitrary Data')
      ->data(array(
              0 => 10,
              1 => 20,
              2 => 15,
              3 => 15,
              4 => 0,
              5 => 5
      ));
 
$chart->series('Bar', KReport_Chart::BAR)
      ->key('Arbitrary Data')
      ->data(array(
              0 => 10,
              1 => 20,
              2 => 15,
              3 => 15,
              4 => 0,
              5 => 5
      ));
Now that a graph object has been assembled and has two charts added to it (a line and a bar), we can execute the graph and display it as a OFC2 flash object, a data table, or downloadable CSV file.

Display the chart:

echo $chart->execute()->as_chart();
Display the data table:

echo $chart->execute()->as_grid();
Display only the "Line" chart in the data table:

echo $chart->execute()->as_grid(true, 'Line');
Download the CSV:

$chart->execute()->as_csv(true);
Download only the "Line" chart CSV:

$chart->execute()->as_csv(true, 'Line');
Here's a full example that you might use on your own site. This example will display a chart with two lines, one for Image hits and another for Page hits.

It will also display a data table below the chart, and an "Export CSV" link.

 $data = array(
 0 => array(
 'Images' => '1',
 'Pages' => '3'
 ),
 1 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 2 => array(
 'Images' => '1',
 'Pages' => '0'
 ),
 3 => array(
 'Images' => '0',
 'Pages' => '1'
 ),
 4 => array(
 'Images' => '0',
 'Pages' => '2'
 ),
 5 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 6 => array(
 'Images' => '1',
 'Pages' => '0'
 ),
 7 => array(
 'Images' => '2',
 'Pages' => '1'
 ),
 8 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 9 => array(
 'Images' => '1',
 'Pages' => '0'
 ),
 10 => array(
 'Images' => '0',
 'Pages' => '1'
 ),
 11 => array(
 'Images' => '0',
 'Pages' => '1'
 ),
 12 => array(
 'Images' => '1',
 'Pages' => '0'
 ),
 13 => array(
 'Images' => '1',
 'Pages' => '1'
 ),
 14 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 15 => array(
 'Images' => '1',
 'Pages' => '1'
 ),
 16 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 17 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 18 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 19 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 20 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 21 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 22 => array(
 'Images' => '0',
 'Pages' => '0'
 ),
 23 => array(
 'Images' => '0',
 'Pages' => '0'
 )
);
  
$hours = array('12am', '1am', '2am', '3am', '4am', '5am', '6am', '7am', '8am', '9am', '10am', '11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm', '8pm', '9pm', '10pm', '11pm');
  
$chart = KReport::instance()
        ->x_labels($hours)
        ->x_alias('Hours')
        ->bg_colour('#FFFFFF')
        ->title('Page Type Hits per Hour')
        ->width('100%')
        ->height('200')
        ->exportable();
  
$images = $chart->series('Images', KReport_Chart::LINE)
                ->key('Images');
  
$pages = $chart->series('Pages', KReport_Chart::LINE)
               ->key('Pages');
 
$itags = $chart->series('image_tags', KReport_Chart::TAG)
               ->text('#y#');  
 
ptags = $chart->series('page_tags', KReport_Chart::TAG)
              ->text('#y#');  
  
foreach($data as $hour => $hits)
{
        $images->point($hour, $hits['Images']);
        $itags ->point($hour, $hits['Images']); 
        $pages ->point($hour, $hits['Pages']);
        $ptags ->point($hour, $hits['Pages']); 
}
  
if (isset($_GET['export_default']))
        $chart->execute()->as_csv(true, '/_tags/', false);
  
echo $chart->execute()->as_chart();
echo $chart->execute()->as_grid(true, '/_tags/', false);
Note the usage of as_csv() and as_grid():

$chart->execute()->as_csv(true, '/_tags/', false);
$chart->execute()->as_grid(true, '/_tags/', false);
The 2nd and 3rd arguments to these functions define, respectively, a regular expression of chart names to match for and whether to include charts that have a matching name.

If the match is negated, that chart will not be included in the output of the function.
